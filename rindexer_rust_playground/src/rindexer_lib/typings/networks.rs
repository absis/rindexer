use std::sync::Arc;

/// THIS IS A GENERATED FILE. DO NOT MODIFY MANUALLY.
///
/// This file was auto generated by rindexer - https://github.com/joshstevens19/rindexer.
/// Any manual changes to this file will be overwritten.
use ethers::providers::{Http, Provider, RetryClient};
use rindexer::{
    lazy_static,
    provider::{create_client, JsonRpcCachedProvider},
    public_read_env_value,
};

lazy_static! {
    static ref ETHEREUM_PROVIDER: Arc<JsonRpcCachedProvider> = create_client(
        &public_read_env_value("https://mainnet.gateway.tenderly.co")
            .unwrap_or("https://mainnet.gateway.tenderly.co".to_string()),
        None
    )
    .expect("Error creating provider");
}
pub fn get_ethereum_provider_cache() -> Arc<JsonRpcCachedProvider> {
    Arc::clone(&ETHEREUM_PROVIDER)
}

pub fn get_ethereum_provider() -> Arc<Provider<RetryClient<Http>>> {
    ETHEREUM_PROVIDER.get_inner_provider()
}

pub fn get_provider_cache_for_network(network: &str) -> Arc<JsonRpcCachedProvider> {
    if network == "ethereum" {
        return get_ethereum_provider_cache();
    }
    panic!("Network not supported")
}
